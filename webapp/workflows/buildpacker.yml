name: Packer CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: "prap@2602S"
          MYSQL_DATABASE: "healthcare"
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install Dependencies
        run: npm install

      - name: Install nodemon
        run: npm install nodemon

      - name: Run Integration Test
        run: npm test

  deploy:
    name: deploying
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Build Artifact
        run: zip -r webapp.zip . -x ".git*"

      - name: Publish WebApp Artifact
        uses: actions/upload-artifact@v2
        with:
          name: webapp
          path: webapp.zip

      - name: check path
        run: |
          pwd
          ls /home/runner/work/webapp/webapp

      - name: Packer init
        run: |
          packer init aws-debian.pkr.hcl

      - name: Format Check Packer File
        run: |
          if ! packer fmt -check aws-debian.pkr.hcl; then
            echo "Packer file formatting check failed. Exiting the pipeline."
            exit 1
          fi

      - name: Validate Packer File
        run: |
          if ! packer validate aws-debian.pkr.hcl; then
            echo "Packer validation check failed. Exiting the pipeline."
            exit 1
          fi

      - name: Build AMI
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # packer build aws-debian.pkr.hcl
          AMI_ID=$(packer build -machine-readable aws-debian.pkr.hcl | awk -F, '$0 ~/artifact,0,id/ {print $6}')
          # echo "AMI ID: $AMI_ID"
          # echo "::set-output name=ami_id::$AMI_ID" 
          echo "AMI ID: $AMI_ID"
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      - name: Created AMI
        run: |
          full_ami_id="${{ env.AMI_ID }}"
          region=$(echo $full_ami_id | cut -d':' -f1)
          ami_id=$(echo $full_ami_id | cut -d':' -f2)
          echo "Created AMI in region $region with AMI ID $ami_id"
          echo "AMI_REGION=$region" >> $GITHUB_ENV
          echo "AMI_ID=$ami_id" >> $GITHUB_ENV



      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMOACC_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEMOACC_SECRET_ACCESS_KEY  }}
          aws-region: ${{ env.AMI_REGION }}


      - name: Update Launch Template
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-id $(aws ec2 describe-launch-templates --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' --output text) \
            --version-description WebVersion2 \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}"
          echo "Latest Launch Template Version: $latest_version"
          echo "LATEST_LAUNCH_TEMPLATE_VERSION=$latest_version" >> $GITHUB_ENV


      - name: Update Auto scaleing
        run: |
          latest_version=$(aws ec2 describe-launch-templates --launch-template-ids $launch_template_id --query 'LaunchTemplates[0].LatestVersionNumber' --output text) 
          LT_NAME=$(aws ec2 describe-launch-templates --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' --output text) 
          autoscaling_group=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(LaunchTemplate.LaunchTemplateName, '${launch_template_id}')].AutoScalingGroupName" --output text)
          echo "Launch Template Version: $latest_version"
          echo "Autoscale version: $autoscaling_group"
          aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name $autoscaling_group \
              --launch-template LaunchTemplateId=$(aws ec2 describe-launch-templates --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' --output text),Version=$latest_version

      - name: Instant Refresh
        run: |
          LT_NAME=$(aws ec2 describe-launch-templates --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' --output text) 
          autoscaling_group=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(LaunchTemplate.LaunchTemplateName, '${launch_template_id}')].AutoScalingGroupName" --output text)
          echo "Autoscale version: $autoscaling_group"
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $autoscaling_group \


  
